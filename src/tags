!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APP_COPYRIGHT	injector.c	8;"	d	file:
APP_COPYRIGHT	sniffex.c	196;"	d	file:
APP_DESC	injector.c	7;"	d	file:
APP_DESC	sniffex.c	195;"	d	file:
APP_DISCLAIMER	injector.c	9;"	d	file:
APP_DISCLAIMER	sniffex.c	197;"	d	file:
APP_NAME	injector.c	6;"	d	file:
APP_NAME	sniffex.c	194;"	d	file:
ARP_H_	include/arp.h	3;"	d
ARP_REPLY	simple_arp_sniffer.cpp	14;"	d	file:
ARP_REQUEST	simple_arp_sniffer.cpp	13;"	d	file:
CLEAR	include/netsimul.h	6;"	d
ETHER_ADDR_LEN	include/ether.h	14;"	d
ETHER_H_	include/ether.h	3;"	d
ICMP_H_	include/icmp.h	3;"	d
INJECT_OP_TCP	injector.c	34;"	d	file:
INJECT_OP_UDP	injector.c	35;"	d	file:
IP_DF	include/ip.h	18;"	d
IP_HL	include/ip.h	27;"	d
IP_H_	include/ip.h	3;"	d
IP_MF	include/ip.h	19;"	d
IP_OFFMASK	include/ip.h	20;"	d
IP_RF	include/ip.h	17;"	d
IP_V	include/ip.h	28;"	d
MAC_ASCII_LEN	include/ether.h	18;"	d
MAXBYTES2CAPTURE	simple_arp_sniffer.cpp	28;"	d	file:
MAXBYTES2CAPTURE	simple_sniffer.cpp	6;"	d	file:
NETSIMUL_H_	include/netsimul.h	3;"	d
SIZE_ETHERNET	include/ether.h	8;"	d
SIZE_ETHER_SUM	include/ether.h	10;"	d
SIZE_IP	include/ip.h	8;"	d
SIZE_IP_ADDR_STR	injector.c	24;"	d	file:
SIZE_PORT_STR	injector.c	25;"	d	file:
SIZE_SEND_BUFFER	injector.c	23;"	d	file:
SIZE_TOK_BUF	include/netsimul.h	12;"	d
SIZE_UDP	include/udp.h	5;"	d
SNAP_LEN	include/netsimul.h	10;"	d
TCP_H_	include/tcp.h	3;"	d
TH_ACK	include/tcp.h	20;"	d
TH_CWR	include/tcp.h	23;"	d
TH_ECE	include/tcp.h	22;"	d
TH_FIN	include/tcp.h	16;"	d
TH_FLAGS	include/tcp.h	24;"	d
TH_OFF	include/tcp.h	14;"	d
TH_PUSH	include/tcp.h	19;"	d
TH_RST	include/tcp.h	18;"	d
TH_SYN	include/tcp.h	17;"	d
TH_URG	include/tcp.h	21;"	d
UDP_H_	include/udp.h	3;"	d
__ch	include/netsimul.h	/^char __ch;$/;"	v
arphdr	simple_arp_sniffer.cpp	/^typedef struct arphdr {$/;"	s	file:
arphdr_t	include/arp.h	/^} arphdr_t;$/;"	t	typeref:struct:sniff_arp
arphdr_t	simple_arp_sniffer.cpp	/^} arphdr_t;$/;"	t	typeref:struct:arphdr	file:
buf	injector.c	/^    u_char *buf;                    \/\/ packet data buffer$/;"	m	struct:inject_packet	file:
daddr	injector.c	/^    struct in_addr saddr, daddr;    \/\/ packet source ip address & destination ip address$/;"	m	struct:inject_packet	typeref:struct:inject_packet::	file:
dport	injector.c	/^    uint16_t sport, dport;          \/\/ packet source port & destination port$/;"	m	struct:inject_packet	file:
encap_ether	injector.c	/^void encap_ether(pcap_t *handler, packet_t *packet)$/;"	f
encap_ip	injector.c	/^void encap_ip(pcap_t *handler, packet_t *packet)$/;"	f
encap_tcp	injector.c	/^void encap_tcp(pcap_t *handler, packet_t *packet)$/;"	f
encap_udp	injector.c	/^void encap_udp(pcap_t *handler, packet_t *packet)$/;"	f
ether_dhost	include/ether.h	/^        u_char  ether_dhost[ETHER_ADDR_LEN];    \/* destination host address *\/$/;"	m	struct:sniff_ethernet
ether_shost	include/ether.h	/^        u_char  ether_shost[ETHER_ADDR_LEN];    \/* source host address *\/$/;"	m	struct:sniff_ethernet
ether_type	include/ether.h	/^        u_short ether_type;                     \/* IP? ARP? RARP? etc *\/$/;"	m	struct:sniff_ethernet
ethernethdr_t	include/ether.h	/^} ethernethdr_t ;$/;"	t	typeref:struct:sniff_ethernet
ethertype_values	sniffex.c	/^const tok_t ethertype_values[] = {$/;"	v
got_packet	sniffex.c	/^got_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *packet)$/;"	f
handle_arp	sniffex.c	/^void handle_arp(const struct sniff_arp * arp)$/;"	f
handle_ether	sniffex.c	/^void handle_ether(const struct sniff_ethernet * ethernet,$/;"	f
handle_inject	injector.c	/^void handle_inject(pcap_t *handler, packet_t *packet)$/;"	f
handle_ip	sniffex.c	/^void handle_ip(const struct sniff_ip * ip,$/;"	f
handle_user_input	injector.c	/^void handle_user_input(pcap_t * handler)$/;"	f
hlen	include/arp.h	/^    u_char hlen;            \/\/ Hardware Address Length$/;"	m	struct:sniff_arp
hlen	simple_arp_sniffer.cpp	/^    u_char hlen;            \/\/ Hardware Address Length$/;"	m	struct:arphdr	file:
htype	include/arp.h	/^    u_int16_t htype;        \/\/ Hardware Type$/;"	m	struct:sniff_arp
htype	simple_arp_sniffer.cpp	/^    u_int16_t htype;        \/\/ Hardware Type$/;"	m	struct:arphdr	file:
icd_id	include/icmp.h	/^            uint16_t icd_id;    \/\/ identifier$/;"	m	struct:sniff_icmp::__anon1::ih_idseque
icd_seq	include/icmp.h	/^            uint16_t icd_seq;   \/\/ sequence number$/;"	m	struct:sniff_icmp::__anon1::ih_idseque
icmp_code	include/icmp.h	/^    uint8_t icmp_code;          \/\/ type sub code$/;"	m	struct:sniff_icmp
icmp_data_t	include/icmp.h	41;"	d
icmp_dun	include/icmp.h	/^    } icmp_dun ;$/;"	m	struct:sniff_icmp	typeref:union:sniff_icmp::__anon2
icmp_gwaddr_t	include/icmp.h	19;"	d
icmp_hun	include/icmp.h	/^    } icmp_hun ;$/;"	m	struct:sniff_icmp	typeref:union:sniff_icmp::__anon1
icmp_id_t	include/icmp.h	20;"	d
icmp_ip_t	include/icmp.h	39;"	d
icmp_mask_t	include/icmp.h	40;"	d
icmp_otime_t	include/icmp.h	36;"	d
icmp_pptr_t	include/icmp.h	18;"	d
icmp_rtime_t	include/icmp.h	37;"	d
icmp_seq_t	include/icmp.h	21;"	d
icmp_sum	include/icmp.h	/^    uint16_t icmp_sum;          \/\/ one complement check sum of struct $/;"	m	struct:sniff_icmp
icmp_ttime_t	include/icmp.h	38;"	d
icmp_type	include/icmp.h	/^    uint8_t icmp_type;          \/\/ type of message$/;"	m	struct:sniff_icmp
icmp_void_t	include/icmp.h	22;"	d
icmpcode_values	sniffex.c	/^const tok_t icmpcode_values[] = {$/;"	v
icmphdr_t	include/icmp.h	/^} icmphdr_t ;$/;"	t	typeref:struct:sniff_icmp
icmptype_values	sniffex.c	/^const tok_t icmptype_values[] = {$/;"	v
id_data	include/icmp.h	/^        uint8_t id_data[1];$/;"	m	union:sniff_icmp::__anon2
id_ip	include/icmp.h	/^        struct id_ip {          $/;"	s	union:sniff_icmp::__anon2
id_ip	include/icmp.h	/^        } id_ip;$/;"	m	union:sniff_icmp::__anon2	typeref:struct:sniff_icmp::__anon2::id_ip
id_mask	include/icmp.h	/^        uint32_t id_mask;$/;"	m	union:sniff_icmp::__anon2
id_ts	include/icmp.h	/^        struct id_ts {$/;"	s	union:sniff_icmp::__anon2
id_ts	include/icmp.h	/^        } id_ts;$/;"	m	union:sniff_icmp::__anon2	typeref:struct:sniff_icmp::__anon2::id_ts
idi_ip	include/icmp.h	/^            struct sniff_ip idi_ip;$/;"	m	struct:sniff_icmp::__anon2::id_ip	typeref:struct:sniff_icmp::__anon2::id_ip::sniff_ip
ih_gwaddr	include/icmp.h	/^        struct in_addr ih_gwaddr;   \/\/ Gateway Internet Address$/;"	m	union:sniff_icmp::__anon1	typeref:struct:sniff_icmp::__anon1::in_addr
ih_idseque	include/icmp.h	/^        struct ih_idseque {$/;"	s	union:sniff_icmp::__anon1
ih_idseque	include/icmp.h	/^        } ih_idseque ;$/;"	m	union:sniff_icmp::__anon1	typeref:struct:sniff_icmp::__anon1::ih_idseque
ih_pptr	include/icmp.h	/^        uint8_t ih_pptr;        \/\/ parameter problem pointer$/;"	m	union:sniff_icmp::__anon1
ih_void	include/icmp.h	/^        uint32_t ih_void;$/;"	m	union:sniff_icmp::__anon1
inject_packet	injector.c	/^typedef struct inject_packet {$/;"	s	file:
ip_dst	include/ip.h	/^        struct  in_addr ip_src,ip_dst;  \/* source and dest address *\/$/;"	m	struct:sniff_ip	typeref:struct:sniff_ip::
ip_id	include/ip.h	/^        u_short ip_id;                  \/* identification *\/$/;"	m	struct:sniff_ip
ip_len	include/ip.h	/^        u_short ip_len;                 \/* total length *\/$/;"	m	struct:sniff_ip
ip_off	include/ip.h	/^        u_short ip_off;                 \/* fragment offset field *\/$/;"	m	struct:sniff_ip
ip_p	include/ip.h	/^        u_char  ip_p;                   \/* protocol *\/$/;"	m	struct:sniff_ip
ip_src	include/ip.h	/^        struct  in_addr ip_src,ip_dst;  \/* source and dest address *\/$/;"	m	struct:sniff_ip	typeref:struct:sniff_ip::in_addr
ip_sum	include/ip.h	/^        u_short ip_sum;                 \/* checksum *\/$/;"	m	struct:sniff_ip
ip_tos	include/ip.h	/^        u_char  ip_tos;                 \/* type of service *\/$/;"	m	struct:sniff_ip
ip_ttl	include/ip.h	/^        u_char  ip_ttl;                 \/* time to live *\/$/;"	m	struct:sniff_ip
ip_vhl	include/ip.h	/^        u_char  ip_vhl;                 \/* version << 4 | header length >> 2 *\/$/;"	m	struct:sniff_ip
iphdr_t	include/ip.h	/^} iphdr_t ;$/;"	t	typeref:struct:sniff_ip
its_otime	include/icmp.h	/^            uint32_t its_otime; \/\/ Originate timestamp$/;"	m	struct:sniff_icmp::__anon2::id_ts
its_rtime	include/icmp.h	/^            uint32_t its_rtime; \/\/ Receive timestamp$/;"	m	struct:sniff_icmp::__anon2::id_ts
its_ttime	include/icmp.h	/^            uint32_t its_ttime; \/\/ Transmit timestamp$/;"	m	struct:sniff_icmp::__anon2::id_ts
main	6.c	/^int main()$/;"	f
main	demo.c	/^int main(int argc, char *argv[])$/;"	f
main	injector.c	/^int main(int argc, char** argv) {$/;"	f
main	simple_arp_sniffer.cpp	/^int main(int argc, char * argv[]) {$/;"	f
main	simple_sniffer.cpp	/^int main(int argc, char * argv[]) {$/;"	f
main	sniffex.c	/^int main(int argc, char **argv)$/;"	f
oper	include/arp.h	/^    u_int16_t oper;         \/\/ Operation Code$/;"	m	struct:sniff_arp
oper	injector.c	/^    u_char oper;                    \/\/ operation code$/;"	m	struct:inject_packet	file:
oper	simple_arp_sniffer.cpp	/^    u_int16_t oper;         \/\/ Operation Code$/;"	m	struct:arphdr	file:
packet_t	injector.c	/^} packet_t ;$/;"	t	typeref:struct:inject_packet	file:
plen	include/arp.h	/^    u_char plen;            \/\/ Protocol Address Length$/;"	m	struct:sniff_arp
plen	simple_arp_sniffer.cpp	/^    u_char plen;            \/\/ Protocol Address Length$/;"	m	struct:arphdr	file:
print_app_banner	injector.c	/^void print_app_banner()$/;"	f
print_app_banner	sniffex.c	/^print_app_banner(void)$/;"	f
print_app_usage	sniffex.c	/^print_app_usage(void)$/;"	f
print_arp	sniffex.c	/^void print_arp(const struct sniff_arp * arp)$/;"	f
print_ether	sniffex.c	/^void print_ether(const struct sniff_ethernet * ethernet)$/;"	f
print_hex_ascii_line	sniffex.c	/^print_hex_ascii_line(const u_char *payload, int len, int offset)$/;"	f
print_icmp	sniffex.c	/^void print_icmp(const struct sniff_icmp * icmp,$/;"	f
print_payload	sniffex.c	/^print_payload(const u_char *payload, int len)$/;"	f
print_tcp	sniffex.c	/^void print_tcp(const struct sniff_tcp * tcp, $/;"	f
print_udp	sniffex.c	/^void print_udp(const struct sniff_udp * udp,$/;"	f
processPacket	simple_sniffer.cpp	/^void processPacket(u_char * arg, const struct pcap_pkthdr * pkthdr, const u_char * packet) {$/;"	f
ptype	include/arp.h	/^    u_int16_t ptype;        \/\/ Protocol Type$/;"	m	struct:sniff_arp
ptype	simple_arp_sniffer.cpp	/^    u_int16_t ptype;        \/\/ Protocol Type$/;"	m	struct:arphdr	file:
s	include/netsimul.h	/^    const char * s;     \/\/ string$/;"	m	struct:tok
saddr	injector.c	/^    struct in_addr saddr, daddr;    \/\/ packet source ip address & destination ip address$/;"	m	struct:inject_packet	typeref:struct:inject_packet::in_addr	file:
send_packet	injector.c	/^int send_packet(pcap_t *handler, const u_char *buf, size_t size)$/;"	f
sha	include/arp.h	/^    u_char sha[6];          \/\/ Sender hardware address$/;"	m	struct:sniff_arp
sha	simple_arp_sniffer.cpp	/^    u_char sha[6];          \/\/ Sender harder address$/;"	m	struct:arphdr	file:
size	injector.c	/^    size_t size;                    \/\/ packet size$/;"	m	struct:inject_packet	file:
sniff_arp	include/arp.h	/^typedef struct sniff_arp {$/;"	s
sniff_ethernet	include/ether.h	/^typedef struct sniff_ethernet {$/;"	s
sniff_icmp	include/icmp.h	/^typedef struct sniff_icmp {$/;"	s
sniff_ip	include/ip.h	/^typedef struct sniff_ip {$/;"	s
sniff_tcp	include/tcp.h	/^typedef struct sniff_tcp {$/;"	s
sniff_udp	include/udp.h	/^typedef struct sniff_udp {$/;"	s
spa	include/arp.h	/^    u_char spa[4];          \/\/ Sender IP address$/;"	m	struct:sniff_arp
spa	simple_arp_sniffer.cpp	/^    u_char spa[4];          \/\/ Sender IP address$/;"	m	struct:arphdr	file:
sport	injector.c	/^    uint16_t sport, dport;          \/\/ packet source port & destination port$/;"	m	struct:inject_packet	file:
tcp_seq	include/tcp.h	/^typedef u_int tcp_seq;$/;"	t
tcphdr_t	include/tcp.h	/^} tcphdr_t ;$/;"	t	typeref:struct:sniff_tcp
th_ack	include/tcp.h	/^        tcp_seq th_ack;                 \/* acknowledgement number *\/$/;"	m	struct:sniff_tcp
th_dport	include/tcp.h	/^        u_short th_dport;               \/* destination port *\/$/;"	m	struct:sniff_tcp
th_flags	include/tcp.h	/^        u_char  th_flags;$/;"	m	struct:sniff_tcp
th_offx2	include/tcp.h	/^        u_char  th_offx2;               \/* data offset, rsvd *\/$/;"	m	struct:sniff_tcp
th_seq	include/tcp.h	/^        tcp_seq th_seq;                 \/* sequence number *\/$/;"	m	struct:sniff_tcp
th_sport	include/tcp.h	/^        u_short th_sport;               \/* source port *\/$/;"	m	struct:sniff_tcp
th_sum	include/tcp.h	/^        u_short th_sum;                 \/* checksum *\/$/;"	m	struct:sniff_tcp
th_urp	include/tcp.h	/^        u_short th_urp;                 \/* urgent pointer *\/$/;"	m	struct:sniff_tcp
th_win	include/tcp.h	/^        u_short th_win;                 \/* window *\/$/;"	m	struct:sniff_tcp
tha	include/arp.h	/^    u_char tha[6];          \/\/ Target hardware address$/;"	m	struct:sniff_arp
tha	simple_arp_sniffer.cpp	/^    u_char tha[6];          \/\/ Target harder address$/;"	m	struct:arphdr	file:
tok	include/netsimul.h	/^typedef struct tok {$/;"	s
tok2str	sniffex.c	/^const char * tok2str(const tok_t * tokp,$/;"	f
tok_t	include/netsimul.h	/^} tok_t ;$/;"	t	typeref:struct:tok
tpa	include/arp.h	/^    u_char tpa[4];          \/\/ Target IP address$/;"	m	struct:sniff_arp
tpa	simple_arp_sniffer.cpp	/^    u_char tpa[4];          \/\/ Target IP address$/;"	m	struct:arphdr	file:
udphdr_t	include/udp.h	/^} udphdr_t ;$/;"	t	typeref:struct:sniff_udp
uh_dport	include/udp.h	/^    uint16_t uh_dport;          \/\/ destination port$/;"	m	struct:sniff_udp
uh_len	include/udp.h	/^    uint16_t uh_len;            \/\/ udp length$/;"	m	struct:sniff_udp
uh_sport	include/udp.h	/^    uint16_t uh_sport;          \/\/ source port$/;"	m	struct:sniff_udp
uh_sum	include/udp.h	/^    uint16_t uh_sum;            \/\/ udp checksum$/;"	m	struct:sniff_udp
v	include/netsimul.h	/^    int v;              \/\/ value$/;"	m	struct:tok
